# Generated by Django 5.2.6 on 2025-09-30 10:16

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("created_by", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_by", models.IntegerField(blank=True, null=True)),
                (
                    "updated_at",
                    models.DateTimeField(blank=True, default=None, null=True),
                ),
                ("deleted_by", models.IntegerField(blank=True, null=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "auth_system_department",
            },
        ),
        migrations.CreateModel(
            name="Menu",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("menu_name", models.CharField(max_length=255, unique=True)),
                ("menu_code", models.CharField(max_length=255, unique=True)),
                ("sort_id", models.IntegerField(blank=True, null=True, unique=True)),
                ("created_by", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_by", models.IntegerField(blank=True, default=0, null=True)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("deleted_by", models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                "db_table": "auth_system_menus",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("role_name", models.CharField(max_length=255, unique=True)),
                ("role_code", models.CharField(max_length=255, unique=True)),
                ("level", models.IntegerField(default=0)),
                ("type", models.CharField(default="Custom", max_length=50)),
                ("description", models.TextField(blank=True, null=True)),
                ("created_by", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_by", models.IntegerField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
                ("deleted_by", models.IntegerField(blank=True, default=0, null=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Role",
                "verbose_name_plural": "Roles",
                "db_table": "auth_system_roles",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TblUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                (
                    "mobile_number",
                    models.CharField(
                        db_index=True,
                        max_length=15,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid mobile number.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("username", models.CharField(max_length=255, unique=True)),
                ("status", models.IntegerField(default=0)),
                (
                    "timezone",
                    models.CharField(
                        blank=True, default="UTC", max_length=255, null=True
                    ),
                ),
                ("timeout", models.CharField(default="30", max_length=100)),
                ("position", models.CharField(max_length=255)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "key",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("created_by", models.IntegerField(blank=True, null=True)),
                ("updated_by", models.IntegerField(blank=True, null=True)),
                ("deleted_by", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        db_column="department_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="department_role",
                        to="auth_system.department",
                    ),
                ),
                (
                    "role_id",
                    models.ForeignKey(
                        blank=True,
                        db_column="role_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users_role",
                        to="auth_system.role",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "auth_system_user",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="APILog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uniqid", models.CharField(db_index=True, max_length=100)),
                ("method", models.CharField(max_length=10)),
                ("endpoint", models.CharField(max_length=255)),
                ("request_data", models.JSONField(blank=True, null=True)),
                ("response_status", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="auth_system_apilogs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LoginSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token", models.CharField(max_length=1024, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("login_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("logout_at", models.DateTimeField(blank=True, null=True)),
                ("expiry_at", models.DateTimeField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "agent_browser",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("request_headers", models.JSONField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Login Session",
                "verbose_name_plural": "Login Sessions",
                "db_table": "auth_system_login_session",
                "ordering": ["-login_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "logout_at"],
                        name="auth_system_user_id_04142c_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="RolePermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("view", models.BooleanField(default=False)),
                ("add", models.BooleanField(default=False)),
                ("edit", models.BooleanField(default=False)),
                ("delete", models.BooleanField(default=False)),
                ("print", models.BooleanField(default=False)),
                ("export", models.BooleanField(default=False)),
                ("sms_send", models.BooleanField(default=False)),
                ("api_limit", models.CharField(blank=True, max_length=255, null=True)),
                ("created_by", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_by", models.IntegerField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
                ("deleted_by", models.IntegerField(blank=True, default=0, null=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "menu_id",
                    models.ForeignKey(
                        db_column="menu_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="role_permissions",
                        to="auth_system.menu",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permissions",
                        to="auth_system.role",
                    ),
                ),
            ],
            options={
                "verbose_name": "Role Permission",
                "verbose_name_plural": "Role Permissions",
                "db_table": "auth_system_role_permissions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        condition=models.Q(("deleted_at__isnull", True)),
                        fields=["role_id", "menu_id"],
                        name="unique_role_menu_active",
                    )
                ],
            },
        ),
    ]
